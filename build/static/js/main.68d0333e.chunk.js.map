{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todos","_this2","fetch","then","res","json","console","log","setState","list","_this3","method","headers","Accept","Content-Type","body","JSON","stringify","user","title","input","value","loadTodos","i","_this4","index","_this5","_this6","setInterval","_this7","react_default","a","createElement","className","ref","defaultValue","onClick","addTodo","map","e","key","type","checked","toggleTodo","removeTodo","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCsGzBC,2BAjGb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,IAHOR,2EAML,IAAAS,EAAAN,KACXO,MAAM,UACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACC,GACLE,QAAQC,IAAIH,GACZH,EAAKO,SAAS,CACZR,MAAOI,EAAIK,2CAKN,IAAAC,EAAAf,KACTO,MAAM,OAAS,CACfS,OAAQ,OACRC,QAAS,CACPC,OAAU,mBACVC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,MACNC,MAAOxB,KAAKyB,MAAMC,UAGnBlB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACC,GACLE,QAAQC,IAAIH,GACZM,EAAKU,MAAMC,MAAQ,GACnBX,EAAKY,iDAGEC,GAAG,IAAAC,EAAA7B,KACbO,MAAM,cAAgB,CACtBS,OAAQ,OACRC,QAAS,CACPC,OAAU,mBACVC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBQ,MAAOF,MAGRpB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACC,GACLE,QAAQC,IAAIH,GACZoB,EAAKF,iDAGEC,GAAG,IAAAG,EAAA/B,KACbO,MAAM,UAAY,CAClBS,OAAQ,OACRC,QAAS,CACPC,OAAU,mBACVC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBQ,MAAOF,MAGRpB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACC,GACLE,QAAQC,IAAIH,GACZsB,EAAKJ,0DAGc,IAAAK,EAAAhC,KACnBA,KAAK2B,YAELM,YAAY,WACVD,EAAKL,aACJ,sCAEI,IAAAO,EAAAlC,KACP,OACEmC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOE,IAAK,SAAAA,GAAG,OAAEL,EAAKT,MAAMc,GAAKC,aAAa,KAC9CL,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAIP,EAAKQ,YAA1B,QAGA1C,KAAKI,MAAMC,MAAMsC,IAAI,SAACC,EAAGhB,GAAJ,OACnBO,EAAAC,EAAAC,cAAA,OAAKQ,IAAKjB,GACRO,EAAAC,EAAAC,cAAA,SAAIO,EAAEpB,MAAN,OAAiBoB,EAAErB,MAASY,EAAAC,EAAAC,cAAA,SAAOS,KAAK,WAAWC,QAASH,EAAEG,QAASN,QAAS,kBAAIP,EAAKc,WAAWpB,MACpGO,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAIP,EAAKe,WAAWrB,KAArC,yBAzFIsB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC","file":"static/js/main.68d0333e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      todos: [],\n    }\n  }\n   loadTodos() {\n    fetch(\"/todos\")\n    .then(res => res.json())\n    .then((res) => {\n      console.log(res);\n      this.setState({\n        todos: res.list\n      })\n    })\n  }\n\n   addTodo() {\n    fetch(\"/add\" , {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      user: \"Tim\",\n      title: this.input.value\n    })\n  })\n    .then(res => res.json())\n    .then((res) => {\n      console.log(res);\n      this.input.value = \"\";\n      this.loadTodos()\n    })\n  }\n  toggleTodo(i) {\n   fetch(\"/toggleTodo\" , {\n   method: 'POST',\n   headers: {\n     'Accept': 'application/json',\n     'Content-Type': 'application/json'\n   },\n   body: JSON.stringify({\n     index: i,\n  })\n })\n   .then(res => res.json())\n   .then((res) => {\n     console.log(res);\n     this.loadTodos()\n   })\n }\n removeTodo(i) {\n  fetch(\"/remove\" , {\n  method: 'POST',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    index: i,\n })\n})\n  .then(res => res.json())\n  .then((res) => {\n    console.log(res);\n    this.loadTodos()\n  })\n}\n   componentDidMount() {\n    this.loadTodos();\n\n    setInterval(() => {\n      this.loadTodos();\n    }, 500);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <input ref={ref=>this.input=ref} defaultValue=\"\"/>\n          <button onClick={()=>this.addTodo()}>add</button>\n        </div>\n        {\n          this.state.todos.map((e, i) => (\n            <div key={i}>\n              <p>{e.title} || {e.user}</p><input type=\"checkbox\" checked={e.checked} onClick={()=>this.toggleTodo(i)}/>\n              <button onClick={()=>this.removeTodo(i)}>l√∂schen</button>\n            </div>\n          ))\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}